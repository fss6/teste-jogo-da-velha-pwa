{"version":3,"sources":["components/Square.jsx","components/Panel.jsx","components/Board.jsx","components/Game.jsx","App.js","serviceWorker.js","index.js"],"names":["initialState","symbol","clickable","textColor","Square","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","reset","setState","isClickable","state","clicked","getSymbol","setTextColor","setSymbol","_this$props","parentActionNotify","index","react_default","a","createElement","GridListTile_default","cols","style","onClick","styles","color","Component","height","display","justifyContent","alignItems","headMessage","bodyMessage","Panel","parentReset","setText","_this2","Paper_default","elevation","paper","Typography_default","variant","component","container","Button_default","marginTop","marginLeft","marginRight","padding","Board","squares","forEach","square","instance","actionNotify","_ref","asyncToGenerator","regenerator_default","mark","_callee","currentSymbol","gameActionNotify","isWinner","wrap","_context","prev","next","panel","_checkRules","stop","_x","apply","arguments","rule","filteredSquares","filter","includes","length","squareBR","squareB","squareR","GridList_default","cellHeight","gridList","map","Square_Square","key","ref","Panel_Panel","borderBottom","borderRight","width","plays","xIsCurrentSymbol","Game","board","_this$state","nextSymbol","_this3","Board_Board","App","flexGrow","AppBar_default","position","marginBottom","Toolbar_default","Game_Game","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","App_App","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.c25ce4b5.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport GridListTile from '@material-ui/core/GridListTile';\n\nconst initialState = {\n  symbol: '',\n  clickable: true,\n  textColor: '#000000'\n}\n\nexport default class Square extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = initialState;\n  }\n\n  reset = () => {\n    this.setState(initialState);\n  }\n\n  isClickable = () => {\n    return this.state.clickable;\n  }\n\n  clicked = () => {\n    this.setState({ clickable: false }, () => { })\n  }\n\n  getSymbol = () => {\n    return this.state.symbol;\n  }\n\n  setTextColor = (textColor) => {\n    this.setState({ textColor: textColor }, () => { })\n  }\n\n  setSymbol = (symbol) => {\n    this.setState({ symbol: symbol }, () => { })\n  }\n\n  render() {\n    let { parentActionNotify, index } = this.props;\n    return (\n      <GridListTile\n        cols={1}\n        style={this.props.style}\n        onClick={() => parentActionNotify(index)}>\n        <div style={styles.symbol}>\n          <h2 style={{ color: this.state.textColor }}>\n            {this.state.symbol}\n          </h2>\n        </div>\n      </GridListTile>\n    );\n  }\n}\n\nconst styles = {\n  symbol: {\n    height: '100%',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n  }\n}","import React, { Component } from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\n\nconst initialState = {\n  headMessage: 'Jogo Iniciado',\n  bodyMessage: 'Aguardando jogador 1'\n}\n\nexport default class Panel extends Component {\n\n  constructor(props) {\n    super(props)\n    this.state = initialState;\n  }\n\n  reset = () => {\n    this.setState(initialState, () => { });\n    this.props.parentReset();\n  }\n\n  setText = (headMessage, bodyMessage) => {\n    this.setState({ headMessage, bodyMessage })\n  }\n\n  render() {\n    return (\n      <Paper elevation={5} style={styles.paper}>\n        <Typography variant=\"h5\" component=\"h3\">\n          {this.state.headMessage}\n        </Typography>\n        <Typography component=\"p\">\n          {this.state.bodyMessage}\n        </Typography>\n        <div style={styles.container}>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={() => this.reset()}>\n            Resetar\n          </Button>\n        </div>\n      </Paper>\n    );\n  }\n}\n\nconst styles = {\n  container: {\n    display: 'flex',\n    justifyContent: 'center',\n    marginTop: '15px',\n  },\n  paper: {\n    marginTop: '20px',\n    marginLeft: '10px',\n    marginRight: '10px',\n    padding: '10px',\n  }\n}","import React, { Component } from 'react';\nimport GridList from '@material-ui/core/GridList';\nimport Square from './Square';\nimport Panel from './Panel';\n\nexport default class Board extends Component {\n\n  constructor(props) {\n    super(props);\n    this.squares = [\n      { instance: null, style: styles.squareBR },\n      { instance: null, style: styles.squareBR },\n      { instance: null, style: styles.squareB },\n      { instance: null, style: styles.squareBR },\n      { instance: null, style: styles.squareBR },\n      { instance: null, style: styles.squareB },\n      { instance: null, style: styles.squareR },\n      { instance: null, style: styles.squareR },\n      { instance: null, style: {} },\n    ]\n  }\n\n  reset = () => {\n    this.squares.forEach(square => {\n      square.instance.reset();\n    });\n    this.props.parentReset();\n  }\n  actionNotify = async (index) => {\n    let square = this.squares[index].instance\n    if (square.isClickable()) {\n      let { currentSymbol, gameActionNotify } = this.props;\n\n      await square.clicked();\n      await square.setSymbol(currentSymbol);\n\n      let headMessage = 'Vez de ' + (currentSymbol === 'X' ? 'O' : 'X');\n      let bodyMessage = 'Última jogada: ' + currentSymbol + ' quadrado [' + index + ']';\n      this.panel.setText(headMessage, bodyMessage)\n      let isWinner = this._checkRules();\n      gameActionNotify(isWinner);\n    }\n\n  }\n\n  _checkRules = () => {\n    let isWinner = false;\n    let { currentSymbol } = this.props;\n\n    const rules = [\n      [0, 1, 2], [3, 4, 5], [6, 7, 8], // linhas\n      [0, 3, 6], [1, 4, 7], [2, 5, 8], // colunas\n      [0, 4, 8], [2, 4, 6] // diagonais\n    ];\n\n    rules.forEach(rule => {\n      let filteredSquares = this.squares.filter(function (square, index) {\n        return (rule.includes(index) && square.instance.getSymbol() === currentSymbol)\n      });\n\n      if (filteredSquares.length >= 3) {\n        let squares = this.squares;\n        squares.forEach(square => {\n          square.instance.clicked();\n        });\n\n        filteredSquares.forEach(square => {\n          square.instance.setTextColor('green');\n        });\n\n        isWinner = true;\n      }\n    });\n    return isWinner;\n  }\n\n  render() {\n    return (\n      <div>\n        <div style={styles.container}>\n          <GridList cellHeight={100} style={styles.gridList} cols={3}>\n            {this.squares.map((square, index) => (\n              <Square\n                key={index}\n                index={index}\n                style={square.style}\n                ref={instance => { this.squares[index].instance = instance }}\n                parentActionNotify={index => this.actionNotify(index)} />\n            ))}\n          </GridList>\n        </div>\n        <Panel\n          parentReset={() => this.reset()}\n          ref={instance => { this.panel = instance }} />\n      </div>\n    );\n  }\n}\n\nconst styles = {\n  container: {\n    display: 'flex',\n    justifyContent: 'center'\n  },\n  paper: {\n    marginTop: '20px',\n    marginLeft: '10px',\n    marginRight: '10px',\n    padding: '10px',\n  },\n  squareBR: {\n    borderBottom: '2px dashed #868e96',\n    borderRight: '2px dashed #868e96'\n  },\n  squareB: {\n    borderBottom: '2px dashed #868e96',\n  },\n  squareR: {\n    borderRight: '2px dashed #868e96'\n  },\n  gridList: {\n    width: 320,\n    height: 320,\n  },\n};","import React, { Component } from 'react';\nimport Board from './Board';\n\nconst initialState = {\n  symbol: 'X',\n  plays: 0,\n  xIsCurrentSymbol: true\n}\n\nexport default class Game extends Component {\n  constructor(props) {\n    super(props);\n    this.state = initialState;\n  }\n\n  reset = () => {\n    this.setState(initialState);\n  }\n\n  actionNotify(isWinner) {\n\n    if (isWinner) {\n      this.board.panel.setText('Partida encerrada!!!', ' Temos um  vencedor.');\n      return;\n    }\n\n    let { plays, xIsCurrentSymbol } = this.state;\n    let nextSymbol = xIsCurrentSymbol ? 'O' : 'X';\n    this.setState({\n      plays: plays + 1,\n      symbol: nextSymbol,\n      xIsCurrentSymbol: !xIsCurrentSymbol\n    }, () => {\n      if (this.state.plays > 8) {\n        this.board.panel.setText('Ops... Deu velha!!!', ' Não houve vencedor.')\n      }\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <Board\n          currentSymbol={this.state.symbol}\n          parentReset={() => this.reset()}\n          ref={instance => { this.board = instance }}\n          gameActionNotify={index => this.actionNotify(index)} />\n      </div>\n    );\n  }\n}","import React, { Component } from 'react';\nimport Game from './components/Game.jsx';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\n\nexport default class App extends Component {\n  render() {\n    return (\n      <div style={{ flexGrow: 1 }}>\n        <AppBar position=\"static\" color=\"primary\" style={{ marginBottom: '40px' }}>\n          <Toolbar>\n            <Typography variant=\"h6\" color=\"inherit\">\n              Jogo da Velha (PWA)\n            </Typography>\n          </Toolbar>\n        </AppBar>\n        <Game />\n      </div>\n    );\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}